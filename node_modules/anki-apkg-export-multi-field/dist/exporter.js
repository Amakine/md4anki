'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLastItem = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sha = require('sha1');

var _sha2 = _interopRequireDefault(_sha);

var _jszip = require('jszip');

var _jszip2 = _interopRequireDefault(_jszip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
  function _class(deckName, _ref) {
    var template = _ref.template,
        sql = _ref.sql;

    _classCallCheck(this, _class);

    this.db = new sql.Database();
    this.db.run(template);

    var now = Date.now();
    var topDeckId = this._getId('cards', 'did', now);
    var topModelId = this._getId('notes', 'mid', now);

    this.deckName = deckName;
    this.zip = new _jszip2.default();
    this.media = [];
    this.topDeckId = topDeckId;
    this.topModelId = topModelId;
    this.separator = '\x1F';

    var decks = this._getInitialRowValue('col', 'decks');
    var deck = getLastItem(decks);
    deck.name = this.deckName;
    deck.id = topDeckId;
    decks[topDeckId + ''] = deck;
    this._update('update col set decks=:decks where id=1', {
      ':decks': JSON.stringify(decks)
    });

    var models = this._getInitialRowValue('col', 'models');
    var model = getLastItem(models);
    model.name = this.deckName;
    model.did = this.topDeckId;
    model.id = topModelId;
    models['' + topModelId] = model;
    this._update('update col set models=:models where id=1', {
      ':models': JSON.stringify(models)
    });
  }

  _createClass(_class, [{
    key: 'save',
    value: function save(options) {
      var zip = this.zip,
          db = this.db,
          media = this.media;

      var binaryArray = db.export();
      var mediaObj = media.reduce(function (prev, curr, idx) {
        prev[idx] = curr.filename;
        return prev;
      }, {});

      zip.file('collection.anki2', new Buffer(binaryArray));
      zip.file('media', JSON.stringify(mediaObj));

      media.forEach(function (item, i) {
        return zip.file(i, item.data);
      });

      var baseOptions = process.env.APP_ENV === 'browser' || typeof window !== 'undefined' ? { type: 'blob' } : {
        type: 'nodebuffer',
        base64: false,
        compression: 'DEFLATE'
      };
      return zip.generateAsync(Object.assign(baseOptions, options));
    }
  }, {
    key: 'addMedia',
    value: function addMedia(filename, data) {
      this.media.push({ filename: filename, data: data });
    }
  }, {
    key: 'addCard',
    value: function addCard(fields) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          tags = _ref2.tags,
          _ref2$due = _ref2.due,
          due = _ref2$due === undefined ? 179 : _ref2$due;

      var topDeckId = this.topDeckId,
          topModelId = this.topModelId,
          separator = this.separator;

      var joinedFields = fields.join(separator);
      var now = Date.now();
      var note_id = this._getId('notes', 'id', now);

      var strTags = '';
      if (typeof tags === 'string') {
        strTags = tags;
      } else if (Array.isArray(tags)) {
        strTags = this._tagsToStr(tags);
      }

      this._update('insert into notes values(:id,:guid,:mid,:mod,:usn,:tags,:flds,:sfld,:csum,:flags,:data)', {
        ':id': note_id, // integer primary key,
        ':guid': '' + this._getId('notes', 'guid', now), // text not null,
        ':mid': topModelId, // integer not null,
        ':mod': this._getId('notes', 'mod', now), // integer not null,
        ':usn': -1, // integer not null,
        ':tags': strTags, // text not null,
        ':flds': joinedFields, // text not null,
        ':sfld': fields[0], // integer not null,
        ':csum': this._checksum(joinedFields), //integer not null,
        ':flags': 0, // integer not null,
        ':data': '' // text not null,
      });

      return this._update('insert into cards values(:id,:nid,:did,:ord,:mod,:usn,:type,:queue,:due,:ivl,:factor,:reps,:lapses,:left,:odue,:odid,:flags,:data)', {
        ':id': this._getId('cards', 'id', now), // integer primary key,
        ':nid': note_id, // integer not null,
        ':did': topDeckId, // integer not null,
        ':ord': 0, // integer not null,
        ':mod': this._getId('cards', 'mod', now), // integer not null,
        ':usn': -1, // integer not null,
        ':type': 0, // integer not null,
        ':queue': 0, // integer not null,
        ':due': due, // integer not null,
        ':ivl': 0, // integer not null,
        ':factor': 0, // integer not null,
        ':reps': 0, // integer not null,
        ':lapses': 0, // integer not null,
        ':left': 0, // integer not null,
        ':odue': 0, // integer not null,
        ':odid': 0, // integer not null,
        ':flags': 0, // integer not null,
        ':data': '' // text not null
      });
    }
  }, {
    key: '_update',
    value: function _update(query, obj) {
      this.db.prepare(query).getAsObject(obj);
    }
  }, {
    key: '_getInitialRowValue',
    value: function _getInitialRowValue(table) {
      var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';

      var query = 'select ' + column + ' from ' + table;
      return this._getFirstVal(query);
    }
  }, {
    key: '_checksum',
    value: function _checksum(str) {
      return parseInt((0, _sha2.default)(str).substr(0, 8), 16);
    }
  }, {
    key: '_getFirstVal',
    value: function _getFirstVal(query) {
      return JSON.parse(this.db.exec(query)[0].values[0]);
    }
  }, {
    key: '_tagsToStr',
    value: function _tagsToStr() {
      var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      return ' ' + tags.map(function (tag) {
        return tag.replace(/ /g, '_');
      }).join(' ') + ' ';
    }
  }, {
    key: '_getId',
    value: function _getId(table, col, ts) {
      var query = 'SELECT ' + col + ' from ' + table + ' WHERE ' + col + ' >= :ts ORDER BY ' + col + ' DESC LIMIT 1';
      var rowObj = this.db.prepare(query).getAsObject({ ':ts': ts });

      return rowObj[col] ? +rowObj[col] + 1 : ts;
    }
  }]);

  return _class;
}();

exports.default = _class;
var getLastItem = exports.getLastItem = function getLastItem(obj) {
  var keys = Object.keys(obj);
  var lastKey = keys[keys.length - 1];

  var item = obj[lastKey];
  delete obj[lastKey];

  return item;
};